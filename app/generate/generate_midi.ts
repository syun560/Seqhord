
import MidiWriter from 'midi-writer-js';
import { Note, Track_Info } from '../types.ts'
import Lib from '../Lib.ts'
import { Track } from 'midi-writer-js/build/types/chunks/track';

// MidiWriterJS
export const generate_midi = (t: Track_Info[], bpm: number) => {
    
    // トラックを配列で複数作る。
    let tracks: Track[] = []

    // Conductor
    tracks[0] = new MidiWriter.Track();
    tracks[0].addMarker("start")
    tracks[0].addCopyright("Copyright!!")
    tracks[0].addText("generated by SMML")
    tracks[0].setTempo(bpm)

    // ノートの追加
    tracks[1] = new MidiWriter.Track();
    tracks[1].addEvent(new MidiWriter.ProgramChangeEvent({instrument: 73, channel: 0}));
    tracks[1].addTrackName("melody")
    tracks[1].addInstrumentName("flute")
    t[0].notes.map(n => {
        let note = new MidiWriter.NoteEvent({
            tick: n.tick * 64,
            pitch: Lib.noteNumberToNoteName(n.pitch),
            duration: 'T' + (n.duration * 64),
            channel: 0,
            velocity: 80
        })
        //console.log(note)
        tracks[1].addEvent(note)
    })

    // コードトラックの追加
    tracks[2] = new MidiWriter.Track();
    tracks[2].addEvent(new MidiWriter.ProgramChangeEvent({instrument: 4, channel: 2}))
    tracks[2].addTrackName("chord")
    t[1].notes.map(n => {
        let note = new MidiWriter.NoteEvent({
            tick: n.tick * 64,
            pitch: Lib.noteNumberToNoteName(n.pitch),
            duration: 'T' + (n.duration * 64),
            channel: 3,
            velocity: 50
        })
        //console.log(note)
        tracks[2].addEvent(note)
    })

    // ベーストラックの追加
    tracks[3] = new MidiWriter.Track();
    tracks[3].addEvent(new MidiWriter.ProgramChangeEvent({instrument: 34, channel: 3}))
    tracks[3].addTrackName("bass")
    t[2].notes.map(n => {
        let note = new MidiWriter.NoteEvent({
            tick: n.tick * 64,
            pitch: Lib.noteNumberToNoteName(n.pitch),
            duration: 'T' + (n.duration * 64),
            channel: 4,
            velocity: 80
        })
        //console.log(note)
        tracks[3].addEvent(note)
    })

    // リズムトラックの追加
    tracks[4] = new MidiWriter.Track();
    tracks[4].addTrackName("drum")
    t[3].notes.map(n => {
        let note = new MidiWriter.NoteEvent({   
            tick: n.tick * 64,
            pitch: Lib.noteNumberToNoteName(n.pitch),
            duration: 'T12',
            channel: t[3].ch,
            velocity: 64
        })
        //console.log(note)
        tracks[4].addEvent(note)
    })

    const write = new MidiWriter.Writer(tracks);

    // data URIを生成する
    return write.dataUri()

}