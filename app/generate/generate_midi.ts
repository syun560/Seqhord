
import MidiWriter from 'midi-writer-js';
import { Track_Info } from '../types.ts'
import Lib from '../Lib.ts'
import { Track } from 'midi-writer-js/build/types/chunks/track';

// MidiWriterJS
export const generate_midi = (tracks: Track_Info[], bpm: number) => {
    
    const reso = 64 // 8分音符のtick

    // MIDIトラックを配列で複数作る。
    let midi_tracks: Track[] = []

    // Conductor
    midi_tracks[0] = new MidiWriter.Track()
    midi_tracks[0].addMarker("setup")
    //midi_tracks[0].addCopyright("Copyright")
    midi_tracks[0].addText("generated by SMML")
    midi_tracks[0].setTempo(bpm)
    midi_tracks[0].addEvent(new MidiWriter.MarkerEvent({delta: reso * 8, text: "start"}))

    // ノートの追加
    tracks.forEach((track, i)=>{
        const t = i + 1 // トラックナンバー
        const ch = track.type !== 'drum' ? i : 9
        midi_tracks[t] = new MidiWriter.Track()
        midi_tracks[t].addEvent(new MidiWriter.ProgramChangeEvent({instrument: track.program, channel: ch}))
        midi_tracks[t].addTrackName(track.name)
        // ボリュームの設定
        midi_tracks[t].addEvent(new MidiWriter.ControllerChangeEvent({controllerNumber: 7, controllerValue: track.volume, channel: ch+1, delta: 1}))
        // Panpotの設定
        midi_tracks[t].addEvent(new MidiWriter.ControllerChangeEvent({controllerNumber: 10, controllerValue: track.panpot, channel: ch+1, delta: 1}))
        // midi_tracks[t].addInstrumentName("flute")
        track.notes.map(n => {
            let note = new MidiWriter.NoteEvent({
                tick: n.tick * reso,
                pitch: Lib.noteNumberToNoteName(n.pitch),
                duration: 'T' + (n.duration * reso),
                channel: ch + 1,
                velocity: 80
            })
            midi_tracks[t].addEvent(note)
        })
    })    
    
    const write = new MidiWriter.Writer(midi_tracks);

    // data URIを生成する
    return write.dataUri()

}